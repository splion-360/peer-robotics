# FROM osrf/ros:foxy-desktop

# # Define ARGs and ENV variables
# ARG USERNAME=peer
# ARG USER_UID=12345
# ARG USER_GID=$USER_UID
# ENV CONDA_DIR=/opt/miniconda

# # Create a non-root user
# RUN groupadd --gid $USER_GID $USERNAME && \
#     useradd --uid $USER_UID --gid $USER_GID -m $USERNAME && \
#     apt-get update && apt-get upgrade -y && \
#     apt-get install -y python3-pip wget unzip git nano && \
#     apt-get clean

# # Install Miniconda
# RUN wget --quiet https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh && \
#     /bin/bash miniconda.sh -b -p $CONDA_DIR && \
#     rm -f miniconda.sh && \
#     $CONDA_DIR/bin/conda init bash


# # RUN chown -R $USERNAME:$USERNAME $CONDA_DIR && \
# #     chown -R $USERNAME:$USERNAME /home/$USERNAME

# # Set up ROS 2 workspace and clone repository
# WORKDIR /home/$USERNAME
# COPY ./internship_assignment_sample_bag_0.db3 ./bagfile.db3
# RUN mkdir -p ros2_ws/src
# WORKDIR /home/$USERNAME/ros2_ws/src
# RUN git clone https://github.com/splion-360/peer-robotics .

# # Execute setup scripts and copy weight files
# RUN /bin/bash -c "sh /home/$USERNAME/ros2_ws/src/seg/setup.sh"
# COPY ./best_segnet.pt /home/$USERNAME/ros2_ws/src/seg/seg/weights/best.pt
# RUN /bin/bash -c "sh /home/$USERNAME/ros2_ws/src/bbox/setup.sh"
# COPY ./best_bbox.pt /home/$USERNAME/ros2_ws/src/bbox/bbox/weights/best.pt




# # Set up Conda environment

# RUN $CONDA_DIR/bin/conda create -n project python=3.8 -y && \
#     echo "source $CONDA_DIR/bin/activate project" >> ~/.bashrc && \
#     echo "export PYTHONPATH='$CONDA_DIR/envs/project/lib/python3.8/site-packages'" >> ~/.bashrc

# # Add PYTHONPATH for ROS
# RUN echo "source /opt/ros/foxy/setup.bash" >> ~/.bashrc && \
#     echo "source /home/$USERNAME/ros2_ws/install/setup.bash" >> ~/.bashrc

# # Build ROS 2 workspace
# WORKDIR /home/$USERNAME/ros2_ws
# RUN /bin/bash -c "source /opt/ros/foxy/setup.bash && source ~/.bashrc && colcon build"

# # Set default user and working directory
# WORKDIR /home/$USERNAME/ros2_ws
# CMD ["/bin/bash"]


FROM nvidia/cuda:11.8.0-devel-ubuntu20.04
ARG USERNAME=peer
# disable terminal interaction for apt
ENV DEBIAN_FRONTEND=noninteractive



# Install cudnn8 and move necessary header files to cuda include directory
RUN apt-get update && apt install libcudnn8-dev -y && \
	cp /usr/include/cudnn_version.h /usr/local/cuda/include && \
	cp /usr/include/cudnn.h /usr/local/cuda/include/ && \
	rm -rf /var/lib/apt/lists/*


# Fundamentals
RUN apt-get update && apt-get install -y \
        bash-completion \
        build-essential \
        clang-format \
        cmake \
        curl \
        git \
        gnupg2 \
        locales \
        lsb-release \
        rsync \
        software-properties-common \
        wget \
        vim \
        unzip \
        mlocate \
	libgoogle-glog-dev \
        && rm -rf /var/lib/apt/lists/*

# Install libtorch
RUN wget https://download.pytorch.org/libtorch/cu113/libtorch-cxx11-abi-shared-with-deps-1.11.0%2Bcu113.zip && \
        unzip libtorch-cxx11-abi-shared-with-deps-1.11.0+cu113.zip && \
        rm -rf libtorch-cxx11-abi-shared-with-deps-1.11.0+cu113.zip 

# Python basics
RUN apt-get update && apt-get install -y \
        python3-flake8 \
        python3-opencv \
        python3-pip \
        python3-pytest-cov \
        python3-setuptools \
        && rm -rf /var/lib/apt/lists/*

# Python3 (PIP)
RUN python3 -m pip install -U \
        argcomplete \
        autopep8 \
        flake8 \
        flake8-blind-except \
        flake8-builtins \
        flake8-class-newline \
        flake8-comprehensions \
        flake8-deprecated \
        flake8-docstrings \
        flake8-import-order \
        flake8-quotes \
        onnx \
        pytest-repeat \
        pytest-rerunfailures \
        pytest \
        pydocstyle \
        scikit-learn \
        torch \
        torchvision \
        ultralytics \
        pillow==9.5.0

        
# Setup ROS2 Foxy
RUN locale-gen en_US en_US.UTF-8
RUN update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8
ENV LANG=en_US.UTF-8

RUN curl -s https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc | apt-key add -
RUN sh -c 'echo "deb [arch=$(dpkg --print-architecture)] http://packages.ros.org/ros2/ubuntu $(lsb_release -cs) main" > /etc/apt/sources.list.d/ros2-latest.list'      

RUN apt-get update && apt-get install -y \
        python3-colcon-common-extensions \
        python3-rosdep \
        python3-vcstool \
        ros-foxy-camera-calibration-parsers \
        ros-foxy-camera-info-manager \
        ros-foxy-desktop \
        ros-foxy-launch-testing-ament-cmake \
        ros-foxy-rqt* \
        ros-foxy-v4l2-camera \
        ros-foxy-vision-msgs \
        ros-foxy-pcl-conversions \
        ros-foxy-sensor-msgs-py \
        ros-foxy-stereo-image-proc \
        ros-foxy-pcl-ros \
        ros-foxy-usb-cam \
        && rm -rf /var/lib/apt/lists/*
        
RUN apt-get update && apt-get install -y \
	&& apt install ros-foxy-rmw-cyclonedds-cpp -y \
        && rm -rf /var/lib/apt/lists/*

RUN rosdep init

RUN rosdep update

WORKDIR /home/$USERNAME
COPY ./internship_assignment_sample_bag_0.db3 ./bagfile.db3
RUN mkdir -p ros2_ws/src
WORKDIR /home/$USERNAME/ros2_ws/src
RUN git clone https://github.com/splion-360/peer-robotics .

# Execute setup scripts and copy weight files
RUN /bin/bash -c "sh /home/$USERNAME/ros2_ws/src/seg/setup.sh"
COPY ./best_segnet.pt /home/$USERNAME/ros2_ws/src/seg/seg/weights/best.pt
RUN /bin/bash -c "sh /home/$USERNAME/ros2_ws/src/bbox/setup.sh"
COPY ./best_bbox.pt /home/$USERNAME/ros2_ws/src/bbox/bbox/weights/best.pt


CMD ["bash"]